/-- On `Ω = {s : ℂ | (1/2) < s.re}`, the “ext” xi factorizes as
`xi_ext ρ = G_ext ρ * ζ(ρ)` with no extra polynomial factor. -/
theorem xi_ext_factorization_on_Ω :
  ∀ ρ ∈ RH.RS.Ω, riemannXi_ext ρ = G_ext ρ * riemannZeta ρ := by
  intro ρ hΩ
  -- From membership in Ω, get `(1/2) < Re ρ`, hence `0 < Re ρ`.
  have hRe_half : (1 / 2 : ℝ) < ρ.re := hΩ
  have hReρ_pos : 0 < ρ.re := by
    have h01_2 : (0 : ℝ) < (1 / 2 : ℝ) := by
      -- `0 < 1/2` from `0 < 1` via `half_pos`
      have h := half_pos (show (0 : ℝ) < (1 : ℝ) from zero_lt_one)
      simpa [one_div] using h
    exact lt_trans h01_2 hRe_half


  -- Hence `ρ ≠ 0`.
  have hρ_ne : ρ ≠ 0 := by
    have hne : ρ.re ≠ 0 := ne_of_gt hReρ_pos
    intro h
    simpa [h, Complex.zero_re] using hne


  -- Use the standard relation `ζ(s) = ξ(s) / Γℝ(s)` (for `s ≠ 0`).
  have hζ : riemannZeta ρ = completedRiemannZeta ρ / Complex.Gammaℝ ρ :=
    riemannZeta_def_of_ne_zero (s := ρ) hρ_ne


  -- Nonvanishing of `Γℝ` on `Re(s) > 0`.
  have hΓR_ne : Complex.Gammaℝ ρ ≠ 0 :=
    Gammaℝ_ne_zero_of_re_pos (s := ρ) hReρ_pos


  -- Compute: `G_ext * ζ = ξ`.
  have hcalc : G_ext ρ * riemannZeta ρ = riemannXi_ext ρ := by
    calc
      G_ext ρ * riemannZeta ρ
          = ((Real.pi : ℂ) ^ (-ρ / 2) * Complex.Gamma (ρ / 2)) * riemannZeta ρ := rfl
      _   = Complex.Gammaℝ ρ * riemannZeta ρ := by
              rw [← Complex.Gammaℝ_def (s := ρ)]
      _   = Complex.Gammaℝ ρ * (completedRiemannZeta ρ / Complex.Gammaℝ ρ) := by
              rw [hζ]
      _   = Complex.Gammaℝ ρ * (completedRiemannZeta ρ * (Complex.Gammaℝ ρ)⁻¹) := by
              rw [div_eq_mul_inv]
      _   = (Complex.Gammaℝ ρ * completedRiemannZeta ρ) * (Complex.Gammaℝ ρ)⁻¹ := by
              rw [mul_assoc]
      _   = (completedRiemannZeta ρ * Complex.Gammaℝ ρ) * (Complex.Gammaℝ ρ)⁻¹ := by
              -- commute the inner product
              have := mul_comm (Complex.Gammaℝ ρ) (completedRiemannZeta ρ)
              simpa [this]
      _   = completedRiemannZeta ρ * (Complex.Gammaℝ ρ * (Complex.Gammaℝ ρ)⁻¹) := by
              rw [← mul_assoc]
      _   = completedRiemannZeta ρ * 1 := by
              rw [mul_inv_cancel₀ hΓR_ne]
      _   = completedRiemannZeta ρ := by
              rw [mul_one]
      _   = riemannXi_ext ρ := rfl


  -- Turn it around to match the statement.
  simpa using hcalc.symm